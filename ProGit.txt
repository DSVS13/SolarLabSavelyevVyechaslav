                                                                  Как работать с Git'ом?
                                                            -пособие для молодых задротов-

--Введение

	В общем, Git придумал один парень когда писал ядро Linux. Это очень огроммный проект, на данный меомент ядро содержит несколько миллионов строк кода на си.
Такое не реально писать в одиночку, уж, тем более без хоть какой-то структуры. Так вот, этот парень будучи студентом придумал такую систему, которая позволяла 
бы вести хронологию разроботки проекта, распределять работу над ним между программистами, да и просто управлять разработкой. Эту систему он назвал git и стал 
повсемесно использовать. Так как в разработке ядра стало участвовать очень много программистов со всего мира не удивитеьлно что Git стал очень популярен 
среди всех программистов, а не только программистов си. Вот так. Изначально Git распространялся только под Unix-подобные операционные системы, сейчас же он 
есть и для Windows. Git распространяется в двух версиях: клиент и сервер. Приложение-клинет самодостаточное. Т.е. если ты хочешь сам для себя использовать git,
то ставь его себе на компьютер и ты получишь всю git-магию, будучи изолированным от всего мира). Приложение-клинет позволяет создавать репозитоий делать 
коммиты и пр., но не умеет давать удаленный доступ к репозиторию. Для этих целей существует приложение-сервер. Оно не имеет визуального интерфейса, 
устанавливается на физический сервер и обслуживает приложения-клиенты. Это давет возможность программистам взаимодействовать, управлять кодом и т.д.


--Установка Git
	Под OS Windows: cкачать программу можно по мсылке: "https://git-scm.com/download/win". Установить от открыть ее терминал. Черное окошечко, через которое 
командами будет вестись 99% работы с Git.
	Под Os Linux: выполнить в терминале "sudo apt-get install git", подтвердить и не закрывать терминал. 


--Работа с Git   

	Все начинаестя с просто: с создания локального репозитория. Локальный репозиторий - просто добавленная директория с файлами, которые отражают всю историю 
изменений. Что понимается под изменением? Представь следующую задачу: есть процесс который следит за файлом и запоминает все изсенения в нем. Каждую строчку, 
каждый пробел и перенос строки. Запрогать такое не составит труда, но только представь как по полученной структуре этих самых изменений будет сложно 
ориентироваться программисту. Именно поэтому в git'e не фиксируются прям все изменения, а только те, которые программист сочел нужным зафиксировать. Эти 
изменения называются коммиты. Локальный репозиторий будет пуст, если не было сделано ни одного коммита.
	Удаленный репозиторий тоже самое что и локальный, просто распологается он на сервере. У программы git есть встроенные средства для работы с сетью. То есть 
она запросто может превратить локальный репозиторй в глобальный, сделать локальную копию из глобального репозитория (скачать имеющийся код). Создать 
репозиторий, удалить, разграничить права и т.д.
	При работе с Git программист первым делом создает локальный репозиторий. Делается это просто: сначала переход в терминале в папку с проектом, после чего 
выполняется команда "git init". Далее в папке с проектом добавится скрытая папочка ".git". В ней и будет храниться вся хронологическая информация о проекте. 
Папочка ".git" представляет собой физическое отображение репозитория. После инициализации репозитория программист начинает прогать и создает какие-то свои 
файлы. В тот момент, когда он решает зафиксировать изменения сначала нужно проиндексировать файлы, иначе Git не станет отслеживать изменения в нем. Для этого 
выполняется команда: "git add <путь/пути к файлу в проекте>", для отдельных файлов и "git add ." для того, чтобы тупо добавить все что есть в папке проекта в 
индекс. После того как добавления были сделаны, git с каждым коммитом будет проверять эти файлы на изменения, а остальные не будет трогать вообще. Чтобы 
удалить файл из индекса, то есть заставить систему забыть файл, нужно выполнить: "git rm --cached [путь/имя_файла]". Если опустить параметр "--cached", то Git 
удалит файл с диска, что лучше лишний раз не делать. После этого шага можно смело фиксировать изменения командой "git commit -m "<название_коммита>"". Теперь 
можно либо постоянно возиться в локальном репозитории, либо перенести его в глобальный. 
	Перенесение локального репозитория в глобальный дело не сложное. Для этого в системе Git нужно установить твое имя и твой email. Это обязательно, иначе 
git тебя не выпустит в сеть. Имя и email добавляются следующим образом: "git config --global user.name "<твое_имя>"" и "git config --global user.email 
"<твой_email>"". После достаточно лишь однажды подключить удаленный репозиторий командой: "git remote add origin <его_remoute_адрес>", а далее неограниченное 
число раз выполнять "git push origin master". Эта команда будет переносить изменения из локального репозитория в удаленный. То есть, чтобы зафиксировать 
изменения в удаленном репозитории нужно: закоммитить изменения в локальном, возможно проиндексировать новые файлы и перекинуть все это в удаленный репозиторий: 
"git push origin master". Все).


--Про удаленные репозитории и почему нельзя просто заливать проект по файликам

	Короче, GitHub, BitBucket и пр. это сервисы, на которых установлена серверная версия Git. Эти сервисы дают удобный web-интерфейс и доступ для просмотра


кода, но не его редактирования и создания. Общение Git-систем по сети происходит с помощью протокола git://, а не ftp, http. Браузеры и другие программы
тупо не поддерживают такой протокол. Добавлять код на такие сервисы нужно с помощью git-клиента, того самого через который создавался и редактировался 
локальный репозиторий. Все необходимые средства он имеет.
	Для добавления кода из локалного репозитория глобальный должен быть создан. Это не задача git-клиента, а задача самого сервиса. Поэтому через браузер
заходишь на любимый тобой сервис, например, GitHub. И создаешь там пустой удаленный репозиторий. После создания тебе станет доступна ссылка на него. Такие
ссылки начинаются с "git://". Все, теперь остается проделать процедуру добавления кода на удаленный репозиторий, описанной в последнем абзаце предыдущей главы.

ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      ВАЖНО      
git1 Safetytrainer только для удаленного
git2 DSVS13 для локального

--Практическая справка
(текст формата: "<какая_то_дичь>", не является частью команды, это пометка для читающего, подразумевающая под собой некоторую строку)

 Перемещение по каталогам:
	cd <путь>

 Создание репозитория: 
	git init

 Добавление файлов в индекс:
	git add <путь/пути к файлу в проекте>
 можно добавить все, что есть в текущей директории командой:
	git add .

 Установка имени и электронной почты разработчика (Без них Git откажется создавать и работать с удаленными репозиториями):
	git config --global user.name "<репозиторий_имя>" к примеру DSVS13 или Safetytrainer
	git config --global user.email "<репозиторий_email>"

 Фиксация коммита:
	git commit -m "<название_коммита>"

 Добавление удаленного репозитория Важно для локального выбери https для удаленного SSH:
	git remote add origin <его_remoute_адрес>

 Посмотреть добавленные сервисы
	git remote -v
 Посмотреть содержание
 	ls
 Вытянуть все к себе перед коммитом
	git pull --all
 Отправка изменений в удаленный репозиторий:
	git push origin master
	<запросится логин и пароль, после ввода которых все изменения перетекут в удаленный репозиторий>

 Просмотр истории коммитов:
	git log

 Копирование удаленного репозитория себе на компьютер:
	git clone <адрес_репозитория>

 Скачивание изменений из удаленного репозитория
	git fetch <адрес_репозитория>



https://bitbucket.org/account/signup/
Vyacheslav13
порол 4*13

http://lariknb/
id102210515 VK